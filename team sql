-- DROP TABLE
-- 위시리스트
DROP TABLE WISHLIST;

-- 신고
DROP TABLE CLAIM; 

-- 댓글
DROP TABLE REPLY;

-- 리뷰
DROP TABLE REVIEW;

-- 예약
DROP TABLE RESERVATION;

-- 결제 
DROP TABLE PAYMENT;

-- 좋아요
DROP TABLE GOODLIKE;

-- 이미지
DROP TABLE IMAGEFILE;

-- 게시판
DROP TABLE BOARD;

-- 상품
DROP TABLE PRODUCT;

-- 멤버
DROP TABLE MEMBER;

-- ----------------------------------------------------------------------------------
-- ----------------------------------------------------------------------------------
-- CREATE TABLE
-- 멤버
-- USER가 Default
CREATE TABLE MEMBER(
   MEMBER_ID VARCHAR(255) PRIMARY KEY,
   MEMBER_PASSWORD VARCHAR(20) NOT NULL, -- 비밀번호
   MEMBER_NICKNAME VARCHAR(20) NOT NULL, -- 닉네임
   MEMBER_NAME VARCHAR(20) NOT NULL,   -- 이름
   MEMBER_PROFILE VARCHAR(100) DEFAULT 'default.jpg',-- 프로필 사진 (파일명만 저장)
   MEMBER_REGISTRATION_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 가입 날짜
   MEMBER_PHONE VARCHAR(20), -- 전화 번호
   MEMBER_ADDRESS VARCHAR(100), -- 주소
   MEMBER_ROLE ENUM('USER', 'OWNER', 'BANNED', 'ADMIN') DEFAULT 'USER' -- 역할 == USER
);


-- 상품
-- 판매자가 삭제 시 상품도 삭제
CREATE TABLE PRODUCT (
    PRODUCT_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 상품 번호 PK
    PRODUCT_NAME VARCHAR(4000) NOT NULL, -- 상품 명
    PRODUCT_PRICE INT NOT NULL, -- 상품 가격
    PRODUCT_DETAILS VARCHAR(4000), -- 상품 설명
    PRODUCT_CNT INT DEFAULT 1, -- 재고
    PRODUCT_ADDRESS VARCHAR(4000) NOT NULL, -- 상품의 주소
    PRODUCT_LOCATION ENUM('바다', '민물') NOT NULL, -- 상품 장소 (바다, 민물)
    PRODUCT_CATEGORY ENUM('낚시배', '낚시터', '낚시카페', '수상') NOT NULL, -- 상품 유형
    PRODUCT_SELLER_ID VARCHAR(255) NOT NULL, -- 판매자 정보 FK
    CONSTRAINT FK_PRODUCT_SELLER FOREIGN KEY (PRODUCT_SELLER_ID) REFERENCES MEMBER(MEMBER_ID)ON DELETE CASCADE -- SELLER 테이블과의 외래 키 제약
);

ALTER TABLE PRODUCT 
MODIFY COLUMN PRODUCT_CNT INT DEFAULT 1;

-- 위시리스트
-- 멤버, 상품 삭제 시 위시리스트도 삭제
CREATE TABLE WISHLIST(
   WISHLIST_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 번호 PK
   WISHLIST_MEMBER_ID VARCHAR(255) NOT NULL, -- 사용자 ID FK
   WISHLIST_PRODUCT_NUM INT NOT NULL, -- 상품 번호 FK
   CONSTRAINT FK_WISHLIST_MEMBER FOREIGN KEY (WISHLIST_MEMBER_ID) REFERENCES MEMBER(MEMBER_ID)ON DELETE CASCADE,
   CONSTRAINT FK_WISHLIST_PRODUCT FOREIGN KEY (WISHLIST_PRODUCT_NUM) REFERENCES PRODUCT(PRODUCT_NUM)ON DELETE CASCADE
);

-- 결제 
-- 멤버, 상품 삭제 시 해당 컬럼 null로 변경
CREATE TABLE PAYMENT(
   PAYMENT_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 결제 번호 PK
   PAYMENT_MEMBER_ID VARCHAR(255), -- 결제자 ID FK
   PAYMENT_PRODUCT_NUM INT, -- 상품 번호 FK
   PAYMENT_ORDER_NUM VARCHAR(50) NOT NULL UNIQUE, -- 주문 번호 (포트원에서 생성되는 번호)
   MERCHANT_UID VARCHAR(100) NOT NULL, -- C에서 사용하는 번호 (UUID + 시간 조합)
   PAYMENT_REGISTRATION_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 결제 날짜
   PAYMENT_PRICE INT NOT NULL, -- 결제 금액
   PAYMENT_STATUS ENUM('결제완료', '결제취소') NOT NULL, -- 결제 상태
   PAYMENT_METHOD VARCHAR(20) NOT NULL, -- 결제 방법
   CONSTRAINT FK_PAYMENT_MEMBER FOREIGN KEY (PAYMENT_MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE SET NULL, -- 외래 키 추가 (MEMBER 테이블에 존재하는 MEMBER_ID)
   CONSTRAINT FK_PAYMENT_PRODUCT FOREIGN KEY (PAYMENT_PRODUCT_NUM) REFERENCES PRODUCT(PRODUCT_NUM)ON DELETE SET NULL -- 외래 키 추가 (PRODUCT 테이블에 존재하는 PRODUCT_NUM)
);

-- 리뷰
-- 상품 삭제 시 리뷰도 삭제
-- 멤버 삭제 시 해당 컬럼 null
CREATE TABLE REVIEW(
   REVIEW_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 리뷰 번호 PK
   REVIEW_CONTENT VARCHAR(100), -- 리뷰 내용
   REVIEW_PRODUCT_NUM INT NOT NULL, -- 리뷰 상품 번호 FK
   REVIEW_WRITER_ID VARCHAR(255), -- 작성자 FK
   REVIEW_REGISTRATION_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 작성 날짜
   REVIEW_STAR INT NOT NULL CHECK (REVIEW_STAR BETWEEN 1 AND 5), -- 별점 (1~5 사이 값만 허용)
   CONSTRAINT FK_REVIEW_PRODUCT FOREIGN KEY (REVIEW_PRODUCT_NUM) REFERENCES PRODUCT(PRODUCT_NUM) ON DELETE CASCADE, -- 외래 키 추가 
   CONSTRAINT FK_REVIEW_WRITER FOREIGN KEY (REVIEW_WRITER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE SET NULL -- 외래 키 추가 
);

-- 게시판
-- 멤버 삭제 시 게시글도 삭제
CREATE TABLE BOARD(
   BOARD_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 번호 PK
   BOARD_TITLE VARCHAR(2000) NOT NULL, -- 제목
   BOARD_CONTENT TEXT, -- 내용
   BOARD_WRITER_ID VARCHAR(255) NOT NULL, -- 작성자 FK 
   BOARD_REGISTRATION_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 작성 날짜
   CONSTRAINT FK_BOARD_WRITER FOREIGN KEY (BOARD_WRITER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE -- 작성자 외래 키 추가
);


-- 댓글
-- 멤버, 게시글 삭제 시 댓글도 삭제
CREATE TABLE REPLY(
   REPLY_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 댓글 번호 PK
   REPLY_CONTENT VARCHAR(100) NOT NULL, -- 댓글 내용
   REPLY_WRITER_ID VARCHAR(255) NOT NULL, -- 작성자 FK 
   REPLY_REGISTRATION_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 작성 날짜
   REPLY_BOARD_NUM INT NOT NULL, -- 글 번호 FK
   CONSTRAINT FK_REPLY_WRITER FOREIGN KEY (REPLY_WRITER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE, -- 작성자 외래 키 추가
   CONSTRAINT FK_REPLY_BOARD FOREIGN KEY (REPLY_BOARD_NUM) REFERENCES BOARD(BOARD_NUM)ON DELETE CASCADE -- 게시글 외래 키 추가
);

-- 신고
-- 게시글, 댓글 삭제 시 컬럼 null
CREATE TABLE CLAIM (
    CLAIM_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 신고 번호 PK
    CLAIM_BOARD_NUM INT, -- 신고 당한 게시판 FK
    CLAIM_REPLY_NUM INT, -- 신고 당한 댓글 FK
    CLAIM_STATUS ENUM('PENDING', 'COMPLETED', 'REJECTED') DEFAULT 'PENDING', -- 신고 처리 여부
    CLAIM_TARGET_MEMBER_ID VARCHAR(255), -- 신고 당한 유저 FK
    CLAIM_REPORTER_ID VARCHAR(255), -- 신고자 FK
    FOREIGN KEY (CLAIM_BOARD_NUM) REFERENCES BOARD(BOARD_NUM) ON DELETE SET NULL, -- BOARD 테이블의 PK
    FOREIGN KEY (CLAIM_REPLY_NUM) REFERENCES REPLY(REPLY_NUM) ON DELETE SET NULL, -- REPLY 테이블의 PK
    FOREIGN KEY (CLAIM_TARGET_MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE SET NULL, -- MEMBER 테이블의 PK
    FOREIGN KEY (CLAIM_REPORTER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE SET NULL, -- MEMBER 테이블의 PK
    UNIQUE (CLAIM_REPORTER_ID, CLAIM_BOARD_NUM), -- 게시판 신고에 대한 중복 방지
    UNIQUE (CLAIM_REPORTER_ID, CLAIM_REPLY_NUM) -- 댓글 신고에 대한 중복 방지
);

-- 좋아요
-- 게시글, 멤버 삭제 시 좋아요도 삭제
CREATE TABLE GOODLIKE( 
   LIKE_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 번호 PK
   LIKE_BOARD_NUM INT, -- 좋아요 받은 글 FK
   LIKE_MEMBER_ID VARCHAR(255) NOT NULL, -- 좋아요 누른 사람 FK
   CONSTRAINT FK_LIKE_BOARD FOREIGN KEY (LIKE_BOARD_NUM) REFERENCES BOARD(BOARD_NUM) ON DELETE CASCADE, -- 외래 키 추가 (BOARD 테이블)
   CONSTRAINT FK_LIKE_MEMBER FOREIGN KEY (LIKE_MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE -- 외래 키 추가 (MEMBER 테이블)
);

-- 예약
-- 결제 삭제 시 컬럼 null
CREATE TABLE RESERVATION (
    RESERVATION_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 예약 번호 PK
    RESERVATION_PAYMENT_NUM INT, -- 결제 번호 FK
    RESERVATION_REGISTRATION_DATE DATE NOT NULL, -- 예약 날짜
    RESERVATION_STATUS ENUM('예약완료', '예약취소', '사용완료') DEFAULT '예약완료' NOT NULL, -- 예약 상태
    CONSTRAINT FK_RESERVATION_PAYMENT FOREIGN KEY (RESERVATION_PAYMENT_NUM) REFERENCES PAYMENT(PAYMENT_NUM) ON DELETE SET NULL -- 결제 번호 FK
);

-- 이미지
-- 게시물, 상품 삭제 시 이미지도 삭제
CREATE TABLE IMAGEFILE( 
   FILE_NUM INT PRIMARY KEY AUTO_INCREMENT, -- 이미지 번호 PK
   FILE_DIR VARCHAR(2000) DEFAULT 'default.jpg', -- 이미지 경로
   BOARD_ITEM_NUM INT, -- 게시글 번호 FK
   PRODUCT_ITEM_NUM INT, -- 상품 번호 FK
   CONSTRAINT FK_IMAGEFILE_BOARD FOREIGN KEY (BOARD_ITEM_NUM) REFERENCES BOARD(BOARD_NUM) ON DELETE CASCADE, -- 게시글 외래 키 추가
   CONSTRAINT FK_IMAGEFILE_PRODUCT FOREIGN KEY (PRODUCT_ITEM_NUM) REFERENCES PRODUCT(PRODUCT_NUM) ON DELETE CASCADE -- 상품 외래 키 추가
);

ALTER TABLE IMAGEFILE
DROP FOREIGN KEY FK_IMAGEFILE_BOARD;

ALTER TABLE IMAGEFILE
DROP FOREIGN KEY FK_IMAGEFILE_PRODUCT;

-- ----------------------------------------------------------------------------------
-- ----------------------------------------------------------------------------------
-- DROP_VIEW
-- 상품 뷰
DROP VIEW PRODUCT_INFO_VIEW;

-- 게시판 뷰
DROP VIEW BOARD_INFO_VIEW;


-- ----------------------------------------------------------------------------------
-- ----------------------------------------------------------------------------------
-- CREATE_VIEW
-- 상품 뷰
CREATE VIEW PRODUCT_INFO_VIEW AS
SELECT 
    P.PRODUCT_NUM, 
    P.PRODUCT_NAME, 
    P.PRODUCT_PRICE,
    P.PRODUCT_ADDRESS, 
    P.PRODUCT_LOCATION, 
    P.PRODUCT_CATEGORY,
    M.MEMBER_NAME AS SELLER_NAME,  -- 사장님 이름 추가
    P.PRODUCT_SELLER_ID,
    COALESCE(RV.RATING, 0) AS RATING,
    COALESCE(PM.PAYMENT_COUNT, 0) AS PAYMENT_COUNT, 
    COALESCE(W.WISHLIST_COUNT, 0) AS WISHLIST_COUNT, 
    PI.FILE_DIR
FROM 
    PRODUCT P 
LEFT JOIN MEMBER M ON P.PRODUCT_SELLER_ID = M.MEMBER_ID  -- MEMBER_ID와 PRODUCT_SELLER_ID를 조인
LEFT JOIN (
    SELECT 
        R.REVIEW_PRODUCT_NUM, 
        ROUND(AVG(R.REVIEW_STAR), 1) AS RATING 
    FROM 
        REVIEW R 
    GROUP BY 
        R.REVIEW_PRODUCT_NUM
) RV ON P.PRODUCT_NUM = RV.REVIEW_PRODUCT_NUM
LEFT JOIN (
    SELECT 
        PA.PAYMENT_PRODUCT_NUM, 
        COUNT(PA.PAYMENT_PRODUCT_NUM) AS PAYMENT_COUNT  
    FROM 
        PAYMENT PA 
    GROUP BY 
        PA.PAYMENT_PRODUCT_NUM
) PM ON P.PRODUCT_NUM = PM.PAYMENT_PRODUCT_NUM
LEFT JOIN (
    SELECT 
        WI.WISHLIST_PRODUCT_NUM, 
        COUNT(WI.WISHLIST_PRODUCT_NUM) AS WISHLIST_COUNT 
    FROM 
        WISHLIST WI 
    GROUP BY 
        WI.WISHLIST_PRODUCT_NUM
) W ON P.PRODUCT_NUM = W.WISHLIST_PRODUCT_NUM
LEFT JOIN (
    SELECT 
        I.FILE_DIR, 
        I.PRODUCT_ITEM_NUM 
    FROM (
        SELECT 
            FILE_DIR,
            PRODUCT_ITEM_NUM, 
            ROW_NUMBER() OVER (PARTITION BY PRODUCT_ITEM_NUM ORDER BY FILE_NUM) AS RN 
        FROM 
            IMAGEFILE
    ) I 
    WHERE 
        RN = 2
) PI ON P.PRODUCT_NUM = PI.PRODUCT_ITEM_NUM;


-- 게시판 뷰
CREATE VIEW BOARD_INFO_VIEW AS
SELECT 
    B.BOARD_NUM, 
    B.BOARD_TITLE, 
    B.BOARD_CONTENT, 
    B.BOARD_REGISTRATION_DATE,
    M.MEMBER_NICKNAME,
    M.MEMBER_ID,
    M.MEMBER_ROLE,
    (SELECT COUNT(G.LIKE_BOARD_NUM) 
     FROM GOODLIKE G 
     WHERE G.LIKE_BOARD_NUM = B.BOARD_NUM) AS LIKE_COUNT,
    I.FILE_DIR
FROM 
    BOARD B
LEFT JOIN MEMBER M ON B.BOARD_WRITER_ID = M.MEMBER_ID
LEFT JOIN (
    SELECT 
        FILE_DIR, 
        BOARD_ITEM_NUM,
        ROW_NUMBER() OVER(PARTITION BY BOARD_ITEM_NUM ORDER BY FILE_NUM) AS RN
    FROM 
        IMAGEFILE 
) I ON B.BOARD_NUM = I.BOARD_ITEM_NUM AND I.RN = 1;
